{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Petstore Web Application API",
    "description": "Find out how your APIs work",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
      "ApiKeyAuth":{
        "type": "apiKey",
        "in": "headers",
        "name": "authorization"
      }
  },
  "paths": {
    "/products":{
      "get": {
          "summary": "Get all the products",
          "tags": [
            "Products"
          ]
      }
    },
    "/product/{id}":{
      "get":{
        "summary": "get product details by id",
        "tags": [
          "Products"
        ],
        "description": "Returns information about a single product.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to retrieve",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product data",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/v1/me":{
      "get": {
        "summary": "Retrieves user details of the currently logged-in user",
        "description": "Retrieves the details of the user who is currently logged in.",
        "tags": [
          "User"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/password/Update":{
      "put": {
        "summary": "Update a user's password.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token obtained by logging in.",
            "required": true,
            "type": "string"
          },
          {
            "name": "current_password",
            "in": "formData",
            "description": "The user's current password.",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_password",
            "in": "formData",
            "description": "The new password to be set.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Password update successful."
          },
          "400": {
            "description": "Bad request. Invalid current password or password format."
          },
          "401": {
            "description": "Unauthorized. User not authenticated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/me/update":{
      "put": {
        "summary": "Update a user's profile information.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token obtained by logging in.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The user's name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "The user's email address.",
            "required": false,
            "type": "string",
            "format": "email"
          },
          {
            "name": "bio",
            "in": "formData",
            "description": "The user's bio or description.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile update successful."
          },
          "400": {
            "description": "Bad request. Invalid email format."
          },
          "401": {
            "description": "Unauthorized. User not authenticated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/order/new":{
      "post": {
        "summary": "Create a new order.",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token obtained by logging in.",
            "required": true,
            "type": "string"
          },
          {
            "name": "product_id",
            "in": "formData",
            "description": "The ID of the product being ordered.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "quantity",
            "in": "formData",
            "description": "The quantity of the product being ordered.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Order creation successful."
          },
          "400": {
            "description": "Bad request. Invalid product ID or quantity."
          },
          "401": {
            "description": "Unauthorized. User not authenticated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }

    },
    "/api/v1/order/{orderid}":{
      "get": {
        "summary": "Get a single order by ID",
        "description": "Returns a single order resource based on the ID provided.",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to retrieve",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      }

    },
    "/api/v1/register":{
      "post": {
        "summary": "Registers a new user",
        "tags": [
          "Authentication"
        ],
        "description": "Registers a new user with the provided information.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Register"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully registered",
            "schema": {
              "$ref": "#/definitions/Register"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/logout":{
      "get": {
        "summary": "Logs out the currently logged-in user",
        "tags": [
          "Authentication"
        ],
        "description": "Logs out the user who is currently logged in.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }

    },
    "/api/v1/password/forgot":{
      "post": {
        "summary": "Send a reset password email to the user's registered email address.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "The email address associated with the user's account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Email sent successfully."
          },
          "400": {
            "description": "Bad request. Invalid email address."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/password/reset/{ecripted}":{
      "put": {
        "summary": "Reset a user's password.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The token received by the user via email.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The new password to be set.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successful."
          },
          "400": {
            "description": "Bad request. Invalid token or password format."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/review":{
      "put": {
        "summary": "Create a new review",
        "description": "",
        "tags": [
          "Reviews"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "review",
            "in": "body",
            "description": "Review object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/orders/me":{
      "get": {
        "summary": "Get orders for logged-in user",
        "description": "Returns a list of orders belonging to the logged-in user.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }

    },
    "/api/v1/reviews?{id}":{
      "get": {
        "summary": "Get all reviews",
        "description": "Returns a list of all reviews.",
        "tags": [
          "Reviews"
        ],
        "responses": {
          "200": {
            "description": "List of reviews",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }

    },

  "/api/v1/login": {
      "post": {
        "summary": "Login user",
        "tags": [
          "Authentication"
        ],
        "description": "Login user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Login user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Login Success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401":{
            "description": "Login details are not valid!!"
          },
          "404":{
            "description": "Email is not registered!"
          },
          "500":{
            "description": "User login failed!!"
          }
        }
      }
    }
  },


  "definitions": {
    "User": {
      "properties": {
        "name":{
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone Number":{
          "type":"integer"
        },
        "Joined on":{
          "type":"string"
        }
      }
    },
    "userEmail":{
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "Register":{
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone Number":{
          "type": "integer",
          "format": "int64"
        },
        "avatar":[{
          "url":{
            "type":"url"
          },
          "id":{
            "type": "integer",
            "format": "int64"
          }

        }

        ]
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "description": {
          "type": "string"
        },
        "ratings":{
          "type": "number",
          "format": "float"
        },
        "images":[
          {
            "url":{
              "type":"url"
            },
            "id":{
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "category":{
          "type": "string"
        },
        "animal":{
          "type": "string"
        },
        "stock":{
          "type": "integer"
        },
        "numofReviews":{
          "type": "integer"
        },
        "reviews":{
          "type": "string"
        },
        "createdAt":{
          "type": "string"
        }
      }

    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "customerName": {
          "type": "string"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time"
        },
        "orderTotal": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "securityDefinitions": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "productId": {
          "type": "integer"
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5
        },
        "comment": {
          "type": "string"
        }
      }
    }


  }
}
  